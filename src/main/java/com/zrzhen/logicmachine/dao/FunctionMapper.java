package com.zrzhen.logicmachine.dao;

import com.zrzhen.logicmachine.domain.Function;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface FunctionMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table function
     *
     * @mbg.generated
     */
    @Delete({
        "delete from `function`",
        "where function_id = #{function_id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer function_id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table function
     *
     * @mbg.generated
     */
    @Insert({
        "insert into `function` (function_id, `name`, ",
        "`path`, param, create_time, ",
        "update_time)",
        "values (#{function_id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, ",
        "#{path,jdbcType=VARCHAR}, #{param,jdbcType=CHAR}, #{create_time,jdbcType=TIMESTAMP}, ",
        "#{update_time,jdbcType=TIMESTAMP})"
    })
    int insert(Function record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table function
     *
     * @mbg.generated
     */
    @InsertProvider(type=FunctionSqlProvider.class, method="insertSelective")
    int insertSelective(Function record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table function
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "function_id, `name`, `path`, param, create_time, update_time",
        "from `function`",
        "where function_id = #{function_id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="function_id", property="function_id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="path", property="path", jdbcType=JdbcType.VARCHAR),
        @Result(column="param", property="param", jdbcType=JdbcType.CHAR),
        @Result(column="create_time", property="create_time", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="update_time", jdbcType=JdbcType.TIMESTAMP)
    })
    Function selectByPrimaryKey(Integer function_id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table function
     *
     * @mbg.generated
     */
    @UpdateProvider(type=FunctionSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Function record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table function
     *
     * @mbg.generated
     */
    @Update({
        "update `function`",
        "set `name` = #{name,jdbcType=VARCHAR},",
          "`path` = #{path,jdbcType=VARCHAR},",
          "param = #{param,jdbcType=CHAR},",
          "create_time = #{create_time,jdbcType=TIMESTAMP},",
          "update_time = #{update_time,jdbcType=TIMESTAMP}",
        "where function_id = #{function_id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Function record);



    @Select({
            "select",
            "function_id, `name`, `path`, param, create_time, update_time",
            "from `function`",
            "where name = #{name,jdbcType=VARCHAR}"
    })
    @Results({
            @Result(column="function_id", property="function_id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
            @Result(column="path", property="path", jdbcType=JdbcType.VARCHAR),
            @Result(column="param", property="param", jdbcType=JdbcType.CHAR)
    })
    Function selectByName(String name);

}